package ccd.repo;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;

import model.Address;
import model.Customer;

@ApplicationScoped
public class AddressInfoRepository {


    @Inject
    private EntityManager em;
    private List<Address> addresses;


    private Integer addressId = 0;

    private String generateAddressId() {
        addressId++;
        return addressId.toString();
    }


    public AddressInfoRepository() {

        addresses = new ArrayList<>();

        String street = "Hauptstr.";
        String houseNumber = "1";
        String zipCode = "4711";
        String city = "MyTown";

        Optional<Address> address = createTestAddress(street, houseNumber, zipCode, city);
//        address.ifPresent(addresses.add);
        if (address.isPresent()) {
            addresses.add(address.get());
        }
    }

    public List<Address> findByCustomer(Customer customer) {
        return customer.getAddresses();
    }

    public Optional<Address> createAddress(Address address) {
        Optional<Address> createdAddress = this.createTestAddress(address.getStreet(), address.getHouseNumber(), address.getZipcode(), address.getCity());
        // Facke! Will be generated by Persistenz
        // For now its only an unidirectional association between/inside customer and address

        if (createdAddress.isPresent()) {
            generateAddressId();
            return createdAddress;
        }

        return Optional.empty();
    }

    public boolean updateAddress(Address oldAddress, Address newAddress, Customer customer) {

        Optional<Address> address = findeAddress(oldAddress, customer);
        if(address.isPresent()) {
            address.get().setCity(newAddress.getCity());
            address.get().setHouseNumber(newAddress.getHouseNumber());
            address.get().setStreet(newAddress.getStreet());
            address.get().setZipCode(newAddress.getZipcode());

            return true;
        }

        return false;
    }


    private Optional<Address> findeAddress(Address oldAddress, Customer customer) {

        List<Address> addresses = customer.getAddresses();
        for (Address address : addresses) {
            if (address.equals(oldAddress)) {
                return Optional.of(oldAddress);
            }
        }

        return Optional.empty();
    }

    private Optional<Address> createTestAddress(String street, String houseNumber, String zipCode, String city) {
        return Optional.of(new Address(street, houseNumber, zipCode, city));
    }
}
